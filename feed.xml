<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Learning Python with the Leetcode Problemset</title>
    <description>This blog documents my road to learn Python by solving programming problems on leetcode.com. I will be adding a post for each problem worthy of discussion.
</description>
    <link>http://yebrahim.github.io/leetcode-python-solutions/</link>
    <atom:link href="http://yebrahim.github.io/leetcode-python-solutions/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 27 Apr 2016 18:16:09 -0700</pubDate>
    <lastBuildDate>Wed, 27 Apr 2016 18:16:09 -0700</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>p20 - Valid Parentheses</title>
        <description>&lt;h1 id=&quot;problemproblem&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/valid-parentheses/&quot;&gt;Problem&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Given a string of only three types of parantheses (and their closing counterparts) &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;[&#39;, &#39;(&#39;, &#39;{&#39;, &#39;]&#39;, &#39;)&#39;, &#39;}&#39;&lt;/code&gt; we’re required to return true if and only if they are properly closed. For example &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;([])&quot;&lt;/code&gt; is valid, whereas &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;({(}))&quot;&lt;/code&gt; is not.&lt;/p&gt;

&lt;h1 id=&quot;discussion&quot;&gt;Discussion&lt;/h1&gt;
&lt;p&gt;A stack should immediately come to mind when solving this problem. The reason is we can open parentheses in any order, but the real check comes when we see closing parentheses. Whenever we see a closed parenthesis, it should have immediately followed an open parenthesis of the same type, all the characters that are allowed in the input are parentheses. A stack helps keep track of the most recently encountered items, so all we need to do is all open parantheses on the stack until we meet a closed parenthesis, in which case it should match the item on the top of the stack, we pop it if that’s the case and continue matching. You can easily see this is a linear &lt;code class=&quot;highlighter-rouge&quot;&gt;O(n)&lt;/code&gt; solution in both time and space.&lt;/p&gt;

&lt;p&gt;When solving the problem this way, you can look at it from a different angle. We ‘ignore’ open parentheses, but closed parentheses will nullify the last open ones. In other words, all such pairs &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;()&#39;&lt;/code&gt; and the likes can be safely ommitted from the input string, which will likely form other pairs. Removing these simplifies the string as well. If we continue doing this, we should either finally hit an empty string, in which case the string was valid, or a non-empty string that cannot be simplified any further, in which case it was not.&lt;/p&gt;

&lt;p&gt;This solution is evidently more time-consuming &lt;code class=&quot;highlighter-rouge&quot;&gt;O(n^2)&lt;/code&gt;, although it can be written surprisingly briefly in Python. But because we’re concerned with performance too, we’ll ignore this solution.&lt;/p&gt;

&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;/h1&gt;

&lt;p&gt;I’m doing something extra here, which is trimming the string down to parentheses only, in case we had any other characters. We do this using the python regex module &lt;code class=&quot;highlighter-rouge&quot;&gt;(re)&lt;/code&gt; which can replace a substring based on a regex. Next, we create a dictionary that maps closing parentheses to their open counterparts. We do the mapping this way because closing parentheses are kind of the ‘trigger’ for our matching algorithm. After that, we loop over all characters, and since using &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; on the the dicionary checks against its keys, we can push all non-key characters (which are open parentheses) to the stack, and pop otherwise after testing the match.&lt;/p&gt;

&lt;h1 id=&quot;code&quot;&gt;Code&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isValid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&#39;[^&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}]&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;braces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;}&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;{&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;)&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;(&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;[&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;myStack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;braces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;braces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;myStack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Tue, 26 Apr 2016 19:24:13 -0700</pubDate>
        <link>http://yebrahim.github.io/leetcode-python-solutions/easy/2016/04/26/p20-valid-parentheses.html</link>
        <guid isPermaLink="true">http://yebrahim.github.io/leetcode-python-solutions/easy/2016/04/26/p20-valid-parentheses.html</guid>
        
        
        <category>easy</category>
        
      </item>
    
  </channel>
</rss>
